// Copyright (C) 2000-2007, Luca Padovani <padovani@sti.uniurb.it>.
// 
// This file is part of GtkMathView, a flexible, high-quality rendering
// engine for MathML documents.
// 
// GtkMathView is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// GtkMathView is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// WARNING: do not edit! This file has been generated automatically


#include <Char.hh>

  
typedef struct TableEntry
{
  Char16 normal;
  Char32 variant;
} TableEntry;

static TableEntry table[] =
{
  { 0x00041, 0x1D468 }, 
  { 0x00042, 0x1D469 }, 
  { 0x00043, 0x1D46A }, 
  { 0x00044, 0x1D46B }, 
  { 0x00045, 0x1D46C }, 
  { 0x00046, 0x1D46D }, 
  { 0x00047, 0x1D46E }, 
  { 0x00048, 0x1D46F }, 
  { 0x00049, 0x1D470 }, 
  { 0x0004A, 0x1D471 }, 
  { 0x0004B, 0x1D472 }, 
  { 0x0004C, 0x1D473 }, 
  { 0x0004D, 0x1D474 }, 
  { 0x0004E, 0x1D475 }, 
  { 0x0004F, 0x1D476 }, 
  { 0x00050, 0x1D477 }, 
  { 0x00051, 0x1D478 }, 
  { 0x00052, 0x1D479 }, 
  { 0x00053, 0x1D47A }, 
  { 0x00054, 0x1D47B }, 
  { 0x00055, 0x1D47C }, 
  { 0x00056, 0x1D47D }, 
  { 0x00057, 0x1D47E }, 
  { 0x00058, 0x1D47F }, 
  { 0x00059, 0x1D480 }, 
  { 0x0005A, 0x1D481 }, 
  { 0x00061, 0x1D482 }, 
  { 0x00062, 0x1D483 }, 
  { 0x00063, 0x1D484 }, 
  { 0x00064, 0x1D485 }, 
  { 0x00065, 0x1D486 }, 
  { 0x00066, 0x1D487 }, 
  { 0x00067, 0x1D488 }, 
  { 0x00068, 0x1D489 }, 
  { 0x00069, 0x1D48A }, 
  { 0x0006A, 0x1D48B }, 
  { 0x0006B, 0x1D48C }, 
  { 0x0006C, 0x1D48D }, 
  { 0x0006D, 0x1D48E }, 
  { 0x0006E, 0x1D48F }, 
  { 0x0006F, 0x1D490 }, 
  { 0x00070, 0x1D491 }, 
  { 0x00071, 0x1D492 }, 
  { 0x00072, 0x1D493 }, 
  { 0x00073, 0x1D494 }, 
  { 0x00074, 0x1D495 }, 
  { 0x00075, 0x1D496 }, 
  { 0x00076, 0x1D497 }, 
  { 0x00077, 0x1D498 }, 
  { 0x00078, 0x1D499 }, 
  { 0x00079, 0x1D49A }, 
  { 0x0007A, 0x1D49B }, 
  { 0x00391, 0x1D71C }, 
  { 0x00392, 0x1D71D }, 
  { 0x00393, 0x1D71E }, 
  { 0x00394, 0x1D71F }, 
  { 0x00395, 0x1D720 }, 
  { 0x00396, 0x1D721 }, 
  { 0x00397, 0x1D722 }, 
  { 0x00398, 0x1D723 }, 
  { 0x00399, 0x1D724 }, 
  { 0x0039A, 0x1D725 }, 
  { 0x0039B, 0x1D726 }, 
  { 0x0039C, 0x1D727 }, 
  { 0x0039D, 0x1D728 }, 
  { 0x0039E, 0x1D729 }, 
  { 0x0039F, 0x1D72A }, 
  { 0x003A0, 0x1D72B }, 
  { 0x003A1, 0x1D72C }, 
  { 0x003A3, 0x1D72E }, 
  { 0x003A4, 0x1D72F }, 
  { 0x003A5, 0x1D730 }, 
  { 0x003A6, 0x1D731 }, 
  { 0x003A7, 0x1D732 }, 
  { 0x003A8, 0x1D733 }, 
  { 0x003A9, 0x1D734 }, 
  { 0x003B1, 0x1D736 }, 
  { 0x003B2, 0x1D737 }, 
  { 0x003B3, 0x1D738 }, 
  { 0x003B4, 0x1D739 }, 
  { 0x003B5, 0x1D73A }, 
  { 0x003B6, 0x1D73B }, 
  { 0x003B7, 0x1D73C }, 
  { 0x003B8, 0x1D73D }, 
  { 0x003B9, 0x1D73E }, 
  { 0x003BA, 0x1D73F }, 
  { 0x003BB, 0x1D740 }, 
  { 0x003BC, 0x1D741 }, 
  { 0x003BD, 0x1D742 }, 
  { 0x003BE, 0x1D743 }, 
  { 0x003BF, 0x1D744 }, 
  { 0x003C0, 0x1D745 }, 
  { 0x003C1, 0x1D746 }, 
  { 0x003C2, 0x1D747 }, 
  { 0x003C3, 0x1D748 }, 
  { 0x003C4, 0x1D749 }, 
  { 0x003C5, 0x1D74A }, 
  { 0x003C6, 0x1D74B }, 
  { 0x003C7, 0x1D74C }, 
  { 0x003C8, 0x1D74D }, 
  { 0x003C9, 0x1D74E }, 
  { 0x003D1, 0x1D751 }, 
  { 0x003D5, 0x1D753 }, 
  { 0x003D6, 0x1D755 }, 
  { 0x003F0, 0x1D752 }, 
  { 0x003F1, 0x1D754 }, 
  { 0x003F4, 0x1D72D }, 
  { 0x02202, 0x1D74F }, 
  { 0x02207, 0x1D735 }, 
  { 0x0220A, 0x1D750 }, 
  { 0, 0 }
};

Char32 
map_variant_bold_italic
(Char32 ch)
{
  if (ch >= 0x0041 and ch <= 0x005A) return table[ch - 0x0041].variant;
  if (ch >= 0x0061 and ch <= 0x007A) return table[ch - 0x0047].variant;
  if (ch >= 0x0391 and ch <= 0x03A1) return table[ch - 0x035D].variant;
  if (ch >= 0x03A3 and ch <= 0x03A9) return table[ch - 0x035E].variant;
  if (ch >= 0x03B1 and ch <= 0x03C9) return table[ch - 0x0365].variant;
  if (ch == 0x03D1) return 0x1D751;
  if (ch >= 0x03D5 and ch <= 0x03D6) return table[ch - 0x036F].variant;
  if (ch >= 0x03F0 and ch <= 0x03F1) return table[ch - 0x0388].variant;
  if (ch == 0x03F4) return 0x1D72D;
  if (ch == 0x2202) return 0x1D74F;
  if (ch == 0x2207) return 0x1D735;
  if (ch == 0x220A) return 0x1D750;
  return ch;
}
