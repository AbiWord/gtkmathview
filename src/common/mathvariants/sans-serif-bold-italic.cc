// Copyright (C) 2000-2007, Luca Padovani <padovani@sti.uniurb.it>.
// 
// This file is part of GtkMathView, a flexible, high-quality rendering
// engine for MathML documents.
// 
// GtkMathView is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// GtkMathView is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// WARNING: do not edit! This file has been generated automatically


#include <Char.hh>

  
typedef struct TableEntry
{
  Char16 normal;
  Char32 variant;
} TableEntry;

static TableEntry table[] =
{
  { 0x00041, 0x1D63C }, 
  { 0x00042, 0x1D63D }, 
  { 0x00043, 0x1D63E }, 
  { 0x00044, 0x1D63F }, 
  { 0x00045, 0x1D640 }, 
  { 0x00046, 0x1D641 }, 
  { 0x00047, 0x1D642 }, 
  { 0x00048, 0x1D643 }, 
  { 0x00049, 0x1D644 }, 
  { 0x0004A, 0x1D645 }, 
  { 0x0004B, 0x1D646 }, 
  { 0x0004C, 0x1D647 }, 
  { 0x0004D, 0x1D648 }, 
  { 0x0004E, 0x1D649 }, 
  { 0x0004F, 0x1D64A }, 
  { 0x00050, 0x1D64B }, 
  { 0x00051, 0x1D64C }, 
  { 0x00052, 0x1D64D }, 
  { 0x00053, 0x1D64E }, 
  { 0x00054, 0x1D64F }, 
  { 0x00055, 0x1D650 }, 
  { 0x00056, 0x1D651 }, 
  { 0x00057, 0x1D652 }, 
  { 0x00058, 0x1D653 }, 
  { 0x00059, 0x1D654 }, 
  { 0x0005A, 0x1D655 }, 
  { 0x00061, 0x1D656 }, 
  { 0x00062, 0x1D657 }, 
  { 0x00063, 0x1D658 }, 
  { 0x00064, 0x1D659 }, 
  { 0x00065, 0x1D65A }, 
  { 0x00066, 0x1D65B }, 
  { 0x00067, 0x1D65C }, 
  { 0x00068, 0x1D65D }, 
  { 0x00069, 0x1D65E }, 
  { 0x0006A, 0x1D65F }, 
  { 0x0006B, 0x1D660 }, 
  { 0x0006C, 0x1D661 }, 
  { 0x0006D, 0x1D662 }, 
  { 0x0006E, 0x1D663 }, 
  { 0x0006F, 0x1D664 }, 
  { 0x00070, 0x1D665 }, 
  { 0x00071, 0x1D666 }, 
  { 0x00072, 0x1D667 }, 
  { 0x00073, 0x1D668 }, 
  { 0x00074, 0x1D669 }, 
  { 0x00075, 0x1D66A }, 
  { 0x00076, 0x1D66B }, 
  { 0x00077, 0x1D66C }, 
  { 0x00078, 0x1D66D }, 
  { 0x00079, 0x1D66E }, 
  { 0x0007A, 0x1D66F }, 
  { 0x00391, 0x1D790 }, 
  { 0x00392, 0x1D791 }, 
  { 0x00393, 0x1D792 }, 
  { 0x00394, 0x1D793 }, 
  { 0x00395, 0x1D794 }, 
  { 0x00396, 0x1D795 }, 
  { 0x00397, 0x1D796 }, 
  { 0x00398, 0x1D797 }, 
  { 0x00399, 0x1D798 }, 
  { 0x0039A, 0x1D799 }, 
  { 0x0039B, 0x1D79A }, 
  { 0x0039C, 0x1D79B }, 
  { 0x0039D, 0x1D79C }, 
  { 0x0039E, 0x1D79D }, 
  { 0x0039F, 0x1D79E }, 
  { 0x003A0, 0x1D79F }, 
  { 0x003A1, 0x1D7A0 }, 
  { 0x003A3, 0x1D7A2 }, 
  { 0x003A4, 0x1D7A3 }, 
  { 0x003A5, 0x1D7A4 }, 
  { 0x003A6, 0x1D7A5 }, 
  { 0x003A7, 0x1D7A6 }, 
  { 0x003A8, 0x1D7A7 }, 
  { 0x003A9, 0x1D7A8 }, 
  { 0x003B1, 0x1D7AA }, 
  { 0x003B2, 0x1D7AB }, 
  { 0x003B3, 0x1D7AC }, 
  { 0x003B4, 0x1D7AD }, 
  { 0x003B5, 0x1D7AE }, 
  { 0x003B6, 0x1D7AF }, 
  { 0x003B7, 0x1D7B0 }, 
  { 0x003B8, 0x1D7B1 }, 
  { 0x003B9, 0x1D7B2 }, 
  { 0x003BA, 0x1D7B3 }, 
  { 0x003BB, 0x1D7B4 }, 
  { 0x003BC, 0x1D7B5 }, 
  { 0x003BD, 0x1D7B6 }, 
  { 0x003BE, 0x1D7B7 }, 
  { 0x003BF, 0x1D7B8 }, 
  { 0x003C0, 0x1D7B9 }, 
  { 0x003C1, 0x1D7BA }, 
  { 0x003C2, 0x1D7BB }, 
  { 0x003C3, 0x1D7BC }, 
  { 0x003C4, 0x1D7BD }, 
  { 0x003C5, 0x1D7BE }, 
  { 0x003C6, 0x1D7BF }, 
  { 0x003C7, 0x1D7C0 }, 
  { 0x003C8, 0x1D7C1 }, 
  { 0x003C9, 0x1D7C2 }, 
  { 0x003D1, 0x1D7C5 }, 
  { 0x003D5, 0x1D7C7 }, 
  { 0x003D6, 0x1D7C9 }, 
  { 0x003F0, 0x1D7C6 }, 
  { 0x003F1, 0x1D7C8 }, 
  { 0x003F4, 0x1D7A1 }, 
  { 0x02202, 0x1D7C3 }, 
  { 0x02207, 0x1D7A9 }, 
  { 0x0220A, 0x1D7C4 }, 
  { 0, 0 }
};

Char32 
map_variant_sans_serif_bold_italic
(Char32 ch)
{
  if (ch >= 0x0041 and ch <= 0x005A) return table[ch - 0x0041].variant;
  if (ch >= 0x0061 and ch <= 0x007A) return table[ch - 0x0047].variant;
  if (ch >= 0x0391 and ch <= 0x03A1) return table[ch - 0x035D].variant;
  if (ch >= 0x03A3 and ch <= 0x03A9) return table[ch - 0x035E].variant;
  if (ch >= 0x03B1 and ch <= 0x03C9) return table[ch - 0x0365].variant;
  if (ch == 0x03D1) return 0x1D7C5;
  if (ch >= 0x03D5 and ch <= 0x03D6) return table[ch - 0x036F].variant;
  if (ch >= 0x03F0 and ch <= 0x03F1) return table[ch - 0x0388].variant;
  if (ch == 0x03F4) return 0x1D7A1;
  if (ch == 0x2202) return 0x1D7C3;
  if (ch == 0x2207) return 0x1D7A9;
  if (ch == 0x220A) return 0x1D7C4;
  return ch;
}
