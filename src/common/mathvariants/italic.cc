// Copyright (C) 2000-2007, Luca Padovani <padovani@sti.uniurb.it>.
// 
// This file is part of GtkMathView, a flexible, high-quality rendering
// engine for MathML documents.
// 
// GtkMathView is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// GtkMathView is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// WARNING: do not edit! This file has been generated automatically


#include <Char.hh>

  
typedef struct TableEntry
{
  Char16 normal;
  Char32 variant;
} TableEntry;

static TableEntry table[] =
{
  { 0x00041, 0x1D434 }, 
  { 0x00042, 0x1D435 }, 
  { 0x00043, 0x1D436 }, 
  { 0x00044, 0x1D437 }, 
  { 0x00045, 0x1D438 }, 
  { 0x00046, 0x1D439 }, 
  { 0x00047, 0x1D43A }, 
  { 0x00048, 0x1D43B }, 
  { 0x00049, 0x1D43C }, 
  { 0x0004A, 0x1D43D }, 
  { 0x0004B, 0x1D43E }, 
  { 0x0004C, 0x1D43F }, 
  { 0x0004D, 0x1D440 }, 
  { 0x0004E, 0x1D441 }, 
  { 0x0004F, 0x1D442 }, 
  { 0x00050, 0x1D443 }, 
  { 0x00051, 0x1D444 }, 
  { 0x00052, 0x1D445 }, 
  { 0x00053, 0x1D446 }, 
  { 0x00054, 0x1D447 }, 
  { 0x00055, 0x1D448 }, 
  { 0x00056, 0x1D449 }, 
  { 0x00057, 0x1D44A }, 
  { 0x00058, 0x1D44B }, 
  { 0x00059, 0x1D44C }, 
  { 0x0005A, 0x1D44D }, 
  { 0x00061, 0x1D44E }, 
  { 0x00062, 0x1D44F }, 
  { 0x00063, 0x1D450 }, 
  { 0x00064, 0x1D451 }, 
  { 0x00065, 0x1D452 }, 
  { 0x00066, 0x1D453 }, 
  { 0x00067, 0x1D454 }, 
  { 0x00068, 0x0210E }, 
  { 0x00069, 0x1D456 }, 
  { 0x0006A, 0x1D457 }, 
  { 0x0006B, 0x1D458 }, 
  { 0x0006C, 0x1D459 }, 
  { 0x0006D, 0x1D45A }, 
  { 0x0006E, 0x1D45B }, 
  { 0x0006F, 0x1D45C }, 
  { 0x00070, 0x1D45D }, 
  { 0x00071, 0x1D45E }, 
  { 0x00072, 0x1D45F }, 
  { 0x00073, 0x1D460 }, 
  { 0x00074, 0x1D461 }, 
  { 0x00075, 0x1D462 }, 
  { 0x00076, 0x1D463 }, 
  { 0x00077, 0x1D464 }, 
  { 0x00078, 0x1D465 }, 
  { 0x00079, 0x1D466 }, 
  { 0x0007A, 0x1D467 }, 
  { 0x00131, 0x1D6A4 }, 
  { 0x00237, 0x1D6A5 }, 
  { 0x00391, 0x1D6E2 }, 
  { 0x00392, 0x1D6E3 }, 
  { 0x00393, 0x1D6E4 }, 
  { 0x00394, 0x1D6E5 }, 
  { 0x00395, 0x1D6E6 }, 
  { 0x00396, 0x1D6E7 }, 
  { 0x00397, 0x1D6E8 }, 
  { 0x00398, 0x1D6E9 }, 
  { 0x00399, 0x1D6EA }, 
  { 0x0039A, 0x1D6EB }, 
  { 0x0039B, 0x1D6EC }, 
  { 0x0039C, 0x1D6ED }, 
  { 0x0039D, 0x1D6EE }, 
  { 0x0039E, 0x1D6EF }, 
  { 0x0039F, 0x1D6F0 }, 
  { 0x003A0, 0x1D6F1 }, 
  { 0x003A1, 0x1D6F2 }, 
  { 0x003A3, 0x1D6F4 }, 
  { 0x003A4, 0x1D6F5 }, 
  { 0x003A5, 0x1D6F6 }, 
  { 0x003A6, 0x1D6F7 }, 
  { 0x003A7, 0x1D6F8 }, 
  { 0x003A8, 0x1D6F9 }, 
  { 0x003A9, 0x1D6FA }, 
  { 0x003B1, 0x1D6FC }, 
  { 0x003B2, 0x1D6FD }, 
  { 0x003B3, 0x1D6FE }, 
  { 0x003B4, 0x1D6FF }, 
  { 0x003B5, 0x1D700 }, 
  { 0x003B6, 0x1D701 }, 
  { 0x003B7, 0x1D702 }, 
  { 0x003B8, 0x1D703 }, 
  { 0x003B9, 0x1D704 }, 
  { 0x003BA, 0x1D705 }, 
  { 0x003BB, 0x1D706 }, 
  { 0x003BC, 0x1D707 }, 
  { 0x003BD, 0x1D708 }, 
  { 0x003BE, 0x1D709 }, 
  { 0x003BF, 0x1D70A }, 
  { 0x003C0, 0x1D70B }, 
  { 0x003C1, 0x1D70C }, 
  { 0x003C2, 0x1D70D }, 
  { 0x003C3, 0x1D70E }, 
  { 0x003C4, 0x1D70F }, 
  { 0x003C5, 0x1D710 }, 
  { 0x003C6, 0x1D711 }, 
  { 0x003C7, 0x1D712 }, 
  { 0x003C8, 0x1D713 }, 
  { 0x003C9, 0x1D714 }, 
  { 0x003D1, 0x1D717 }, 
  { 0x003D5, 0x1D719 }, 
  { 0x003D6, 0x1D71B }, 
  { 0x003F0, 0x1D718 }, 
  { 0x003F1, 0x1D71A }, 
  { 0x003F4, 0x1D6F3 }, 
  { 0x02202, 0x1D715 }, 
  { 0x02207, 0x1D6FB }, 
  { 0x0220A, 0x1D716 }, 
  { 0, 0 }
};

Char32 
map_variant_italic
(Char32 ch)
{
  if (ch >= 0x0041 and ch <= 0x005A) return table[ch - 0x0041].variant;
  if (ch >= 0x0061 and ch <= 0x007A) return table[ch - 0x0047].variant;
  if (ch == 0x0131) return 0x1D6A4;
  if (ch == 0x0237) return 0x1D6A5;
  if (ch >= 0x0391 and ch <= 0x03A1) return table[ch - 0x035B].variant;
  if (ch >= 0x03A3 and ch <= 0x03A9) return table[ch - 0x035C].variant;
  if (ch >= 0x03B1 and ch <= 0x03C9) return table[ch - 0x0363].variant;
  if (ch == 0x03D1) return 0x1D717;
  if (ch >= 0x03D5 and ch <= 0x03D6) return table[ch - 0x036D].variant;
  if (ch >= 0x03F0 and ch <= 0x03F1) return table[ch - 0x0386].variant;
  if (ch == 0x03F4) return 0x1D6F3;
  if (ch == 0x2202) return 0x1D715;
  if (ch == 0x2207) return 0x1D6FB;
  if (ch == 0x220A) return 0x1D716;
  return ch;
}
